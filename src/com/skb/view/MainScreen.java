package com.skb.view;
import com.skb.model.ProductModel;
import java.awt.Color;
import javax.swing.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author shishir
 */
public class MainScreen extends javax.swing.JFrame {
    
    private List<ProductModel> productList;

    /**
     * Creates new form MainScreen
     */
    public MainScreen() {
        initComponents();
        initializeData();
        
        //My Code
        setTitle("Shishir Khadya Bhandar");    
        setLocationRelativeTo(null); // this method display the JFrame to center position of a screen
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlTopBar = new javax.swing.JPanel();
        pnlHomeTab = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pnlProductTab = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        pnlControlTab = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        pnlSearchBar = new javax.swing.JPanel();
        lblBackArrow = new javax.swing.JLabel();
        lblFrontArrow = new javax.swing.JLabel();
        lblRefresh = new javax.swing.JLabel();
        textFieldSearchBar = new javax.swing.JTextField();
        pnlAllScreens = new javax.swing.JPanel();
        pnlControlScreen = new javax.swing.JPanel();
        lblControlScreenMode = new javax.swing.JLabel();
        comboBoxModeSelector = new javax.swing.JComboBox<>();
        pnlAllControlPanels = new javax.swing.JPanel();
        pnlRemoveModeSelected = new javax.swing.JPanel();
        tfProductName2 = new javax.swing.JTextField();
        lblAddAProduct2 = new javax.swing.JLabel();
        lblProductName2 = new javax.swing.JLabel();
        btnRemoveIt = new javax.swing.JButton();
        pnlUpdateModeSelected = new javax.swing.JPanel();
        lblAddAProduct1 = new javax.swing.JLabel();
        tfProductName1 = new javax.swing.JTextField();
        tfProductPrice1 = new javax.swing.JTextField();
        tfProductId1 = new javax.swing.JTextField();
        tfProductWeight1 = new javax.swing.JTextField();
        tfProductUnit1 = new javax.swing.JTextField();
        tfProductQuantity1 = new javax.swing.JTextField();
        tfProductSupplier1 = new javax.swing.JTextField();
        btnUpdateIt = new javax.swing.JButton();
        lblProductName1 = new javax.swing.JLabel();
        lblProductPrice1 = new javax.swing.JLabel();
        lblProductQuantity1 = new javax.swing.JLabel();
        lblProductId1 = new javax.swing.JLabel();
        lblProductWeight1 = new javax.swing.JLabel();
        lblProductUnit1 = new javax.swing.JLabel();
        lblProductSupplier1 = new javax.swing.JLabel();
        pnlAddModeSelected = new javax.swing.JPanel();
        lblAddAProduct = new javax.swing.JLabel();
        tfProductName = new javax.swing.JTextField();
        tfProductPrice = new javax.swing.JTextField();
        tfProductId = new javax.swing.JTextField();
        tfProductWeight = new javax.swing.JTextField();
        tfProductQuantity = new javax.swing.JTextField();
        tfProductUnit = new javax.swing.JTextField();
        tfProductSupplier = new javax.swing.JTextField();
        btnAddIt = new javax.swing.JButton();
        lblProductName = new javax.swing.JLabel();
        lblProductPrice = new javax.swing.JLabel();
        lblProductQuantity = new javax.swing.JLabel();
        lblProductId = new javax.swing.JLabel();
        lblProductWeight = new javax.swing.JLabel();
        lblProductUnit = new javax.swing.JLabel();
        lblProductSupplier = new javax.swing.JLabel();
        pnlNoModeSelected = new javax.swing.JPanel();
        lblNoModeSelectedBackground = new javax.swing.JLabel();
        pnlProductScreen = new javax.swing.JPanel();
        lblProductScreenProductsTable = new javax.swing.JLabel();
        tableScrollPane = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        pnlHomeScreen = new javax.swing.JPanel();
        lblHomeBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("mainScreenFrame");
        setBackground(new java.awt.Color(255, 255, 255));
        setBounds(new java.awt.Rectangle(40, 0, 0, 0));
        setMaximumSize(new java.awt.Dimension(1280, 720));
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlTopBar.setBackground(new java.awt.Color(255, 255, 255));
        pnlTopBar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlTopBar.setMaximumSize(new java.awt.Dimension(1280, 59));
        pnlTopBar.setMinimumSize(new java.awt.Dimension(1280, 59));
        pnlTopBar.setPreferredSize(new java.awt.Dimension(1280, 59));
        pnlTopBar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlHomeTab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlHomeTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnlHomeTabMouseClicked(evt);
            }
        });

        jLabel1.setText("Home");

        javax.swing.GroupLayout pnlHomeTabLayout = new javax.swing.GroupLayout(pnlHomeTab);
        pnlHomeTab.setLayout(pnlHomeTabLayout);
        pnlHomeTabLayout.setHorizontalGroup(
            pnlHomeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHomeTabLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel1)
                .addContainerGap(57, Short.MAX_VALUE))
        );
        pnlHomeTabLayout.setVerticalGroup(
            pnlHomeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHomeTabLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        pnlTopBar.add(pnlHomeTab, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 140, 30));

        pnlProductTab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlProductTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnlProductTabMouseClicked(evt);
            }
        });

        jLabel2.setText("Product");

        javax.swing.GroupLayout pnlProductTabLayout = new javax.swing.GroupLayout(pnlProductTab);
        pnlProductTab.setLayout(pnlProductTabLayout);
        pnlProductTabLayout.setHorizontalGroup(
            pnlProductTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProductTabLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel2)
                .addContainerGap(55, Short.MAX_VALUE))
        );
        pnlProductTabLayout.setVerticalGroup(
            pnlProductTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlProductTabLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addContainerGap())
        );

        pnlTopBar.add(pnlProductTab, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, 150, -1));

        pnlControlTab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlControlTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnlControlTabMouseClicked(evt);
            }
        });

        jLabel3.setText("Control");

        javax.swing.GroupLayout pnlControlTabLayout = new javax.swing.GroupLayout(pnlControlTab);
        pnlControlTab.setLayout(pnlControlTabLayout);
        pnlControlTabLayout.setHorizontalGroup(
            pnlControlTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlTabLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabel3)
                .addContainerGap(62, Short.MAX_VALUE))
        );
        pnlControlTabLayout.setVerticalGroup(
            pnlControlTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlTopBar.add(pnlControlTab, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 10, 160, -1));

        getContentPane().add(pnlTopBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 50));

        pnlSearchBar.setBackground(new java.awt.Color(255, 255, 255));
        pnlSearchBar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblBackArrow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/skb/resoruces/backArrow.png"))); // NOI18N

        lblFrontArrow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/skb/resoruces/frontArrow.png"))); // NOI18N

        lblRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/skb/resoruces/refresh.png"))); // NOI18N

        javax.swing.GroupLayout pnlSearchBarLayout = new javax.swing.GroupLayout(pnlSearchBar);
        pnlSearchBar.setLayout(pnlSearchBarLayout);
        pnlSearchBarLayout.setHorizontalGroup(
            pnlSearchBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchBarLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(lblBackArrow, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblFrontArrow, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textFieldSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 1138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        pnlSearchBarLayout.setVerticalGroup(
            pnlSearchBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblBackArrow, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlSearchBarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSearchBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFrontArrow, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                    .addGroup(pnlSearchBarLayout.createSequentialGroup()
                        .addComponent(textFieldSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        getContentPane().add(pnlSearchBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 1280, 40));

        pnlAllScreens.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlControlScreen.setBackground(new java.awt.Color(148, 183, 58));
        pnlControlScreen.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblControlScreenMode.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        lblControlScreenMode.setText("Mode:");

        comboBoxModeSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No Mode", "ADD", "UPDATE", "REMOVE" }));
        comboBoxModeSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxModeSelectorActionPerformed(evt);
            }
        });

        pnlAllControlPanels.setBackground(new java.awt.Color(148, 183, 58));
        pnlAllControlPanels.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblAddAProduct2.setFont(new java.awt.Font("Liberation Sans", 0, 48)); // NOI18N
        lblAddAProduct2.setText("REMOVE a Product");

        lblProductName2.setText("Product Id");

        btnRemoveIt.setText("REMOVE IT");
        btnRemoveIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveItActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlRemoveModeSelectedLayout = new javax.swing.GroupLayout(pnlRemoveModeSelected);
        pnlRemoveModeSelected.setLayout(pnlRemoveModeSelectedLayout);
        pnlRemoveModeSelectedLayout.setHorizontalGroup(
            pnlRemoveModeSelectedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlRemoveModeSelectedLayout.createSequentialGroup()
                .addContainerGap(358, Short.MAX_VALUE)
                .addComponent(lblAddAProduct2)
                .addGap(366, 366, 366))
            .addGroup(pnlRemoveModeSelectedLayout.createSequentialGroup()
                .addGap(506, 506, 506)
                .addComponent(lblProductName2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnlRemoveModeSelectedLayout.createSequentialGroup()
                .addGap(472, 472, 472)
                .addGroup(pnlRemoveModeSelectedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnRemoveIt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tfProductName2, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnlRemoveModeSelectedLayout.setVerticalGroup(
            pnlRemoveModeSelectedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRemoveModeSelectedLayout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(lblAddAProduct2)
                .addGap(123, 123, 123)
                .addComponent(lblProductName2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tfProductName2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(btnRemoveIt, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(74, Short.MAX_VALUE))
        );

        pnlAllControlPanels.add(pnlRemoveModeSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 1150, 490));

        pnlUpdateModeSelected.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblAddAProduct1.setFont(new java.awt.Font("Liberation Sans", 0, 48)); // NOI18N
        lblAddAProduct1.setText("UPDATE a Product");
        pnlUpdateModeSelected.add(lblAddAProduct1, new org.netbeans.lib.awtextra.AbsoluteConstraints(401, 39, -1, -1));
        pnlUpdateModeSelected.add(tfProductName1, new org.netbeans.lib.awtextra.AbsoluteConstraints(376, 185, 140, 48));
        pnlUpdateModeSelected.add(tfProductPrice1, new org.netbeans.lib.awtextra.AbsoluteConstraints(593, 185, 140, 48));
        pnlUpdateModeSelected.add(tfProductId1, new org.netbeans.lib.awtextra.AbsoluteConstraints(166, 185, 140, 48));
        pnlUpdateModeSelected.add(tfProductWeight1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 290, 140, 48));
        pnlUpdateModeSelected.add(tfProductUnit1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 290, 140, 48));
        pnlUpdateModeSelected.add(tfProductQuantity1, new org.netbeans.lib.awtextra.AbsoluteConstraints(798, 185, 140, 48));
        pnlUpdateModeSelected.add(tfProductSupplier1, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 290, 160, 40));

        btnUpdateIt.setText("UPDATE IT");
        btnUpdateIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateItActionPerformed(evt);
            }
        });
        pnlUpdateModeSelected.add(btnUpdateIt, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 390, 176, 57));

        lblProductName1.setText("Name");
        pnlUpdateModeSelected.add(lblProductName1, new org.netbeans.lib.awtextra.AbsoluteConstraints(376, 161, -1, -1));

        lblProductPrice1.setText("Price");
        pnlUpdateModeSelected.add(lblProductPrice1, new org.netbeans.lib.awtextra.AbsoluteConstraints(593, 161, -1, -1));

        lblProductQuantity1.setText("Quantity");
        pnlUpdateModeSelected.add(lblProductQuantity1, new org.netbeans.lib.awtextra.AbsoluteConstraints(798, 161, -1, -1));

        lblProductId1.setText("Product ID");
        pnlUpdateModeSelected.add(lblProductId1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 160, -1, -1));

        lblProductWeight1.setText("Weight");
        pnlUpdateModeSelected.add(lblProductWeight1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 270, -1, -1));

        lblProductUnit1.setText("Unit of Weight");
        pnlUpdateModeSelected.add(lblProductUnit1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 270, -1, -1));

        lblProductSupplier1.setText("Supplier");
        pnlUpdateModeSelected.add(lblProductSupplier1, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 270, -1, -1));

        pnlAllControlPanels.add(pnlUpdateModeSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 1150, 490));

        pnlAddModeSelected.setBackground(new java.awt.Color(255, 255, 255));
        pnlAddModeSelected.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblAddAProduct.setFont(new java.awt.Font("Liberation Sans", 0, 48)); // NOI18N
        lblAddAProduct.setText("ADD a Product");
        pnlAddModeSelected.add(lblAddAProduct, new org.netbeans.lib.awtextra.AbsoluteConstraints(401, 39, -1, -1));
        pnlAddModeSelected.add(tfProductName, new org.netbeans.lib.awtextra.AbsoluteConstraints(376, 185, 140, 48));
        pnlAddModeSelected.add(tfProductPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(593, 185, 140, 48));
        pnlAddModeSelected.add(tfProductId, new org.netbeans.lib.awtextra.AbsoluteConstraints(166, 185, 140, 48));
        pnlAddModeSelected.add(tfProductWeight, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 300, 140, 48));
        pnlAddModeSelected.add(tfProductQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(798, 185, 140, 48));
        pnlAddModeSelected.add(tfProductUnit, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 300, 140, 48));
        pnlAddModeSelected.add(tfProductSupplier, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 300, 140, 48));

        btnAddIt.setText("ADD IT");
        btnAddIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddItActionPerformed(evt);
            }
        });
        pnlAddModeSelected.add(btnAddIt, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 390, 176, 57));

        lblProductName.setText("Name");
        pnlAddModeSelected.add(lblProductName, new org.netbeans.lib.awtextra.AbsoluteConstraints(376, 161, -1, -1));

        lblProductPrice.setText("Price");
        pnlAddModeSelected.add(lblProductPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(593, 161, -1, -1));

        lblProductQuantity.setText("Quantity");
        pnlAddModeSelected.add(lblProductQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(798, 161, -1, -1));

        lblProductId.setText("Product ID");
        pnlAddModeSelected.add(lblProductId, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 160, -1, -1));

        lblProductWeight.setText("Weight");
        pnlAddModeSelected.add(lblProductWeight, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 270, -1, -1));

        lblProductUnit.setText("Unit of Weight");
        pnlAddModeSelected.add(lblProductUnit, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 270, -1, -1));

        lblProductSupplier.setText("Supplier");
        pnlAddModeSelected.add(lblProductSupplier, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 280, -1, -1));

        pnlAllControlPanels.add(pnlAddModeSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 1150, 490));

        pnlNoModeSelected.setBackground(new java.awt.Color(148, 183, 58));
        pnlNoModeSelected.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblNoModeSelectedBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/skb/resoruces/noModeSelectedBg.png"))); // NOI18N
        pnlNoModeSelected.add(lblNoModeSelectedBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1120, 490));

        pnlAllControlPanels.add(pnlNoModeSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 1150, 490));

        javax.swing.GroupLayout pnlControlScreenLayout = new javax.swing.GroupLayout(pnlControlScreen);
        pnlControlScreen.setLayout(pnlControlScreenLayout);
        pnlControlScreenLayout.setHorizontalGroup(
            pnlControlScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlScreenLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblControlScreenMode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(comboBoxModeSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(85, 85, 85))
            .addGroup(pnlControlScreenLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(pnlAllControlPanels, javax.swing.GroupLayout.PREFERRED_SIZE, 1169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(55, Short.MAX_VALUE))
        );
        pnlControlScreenLayout.setVerticalGroup(
            pnlControlScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlScreenLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(pnlControlScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblControlScreenMode)
                    .addComponent(comboBoxModeSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(pnlAllControlPanels, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pnlAllScreens.add(pnlControlScreen, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 630));

        pnlProductScreen.setBackground(new java.awt.Color(255, 255, 255));
        pnlProductScreen.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblProductScreenProductsTable.setFont(new java.awt.Font("Liberation Sans", 0, 48)); // NOI18N
        lblProductScreenProductsTable.setText("Products Table");
        pnlProductScreen.add(lblProductScreenProductsTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(432, 49, -1, -1));

        tableScrollPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tableScrollPane.setEnabled(false);
        tableScrollPane.setFocusable(false);

        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Price", "Quantity", "Supplier", "Weight", "Unit"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableScrollPane.setViewportView(productTable);
        if (productTable.getColumnModel().getColumnCount() > 0) {
            productTable.getColumnModel().getColumn(0).setResizable(false);
            productTable.getColumnModel().getColumn(1).setResizable(false);
            productTable.getColumnModel().getColumn(2).setResizable(false);
            productTable.getColumnModel().getColumn(3).setResizable(false);
            productTable.getColumnModel().getColumn(4).setResizable(false);
            productTable.getColumnModel().getColumn(5).setResizable(false);
            productTable.getColumnModel().getColumn(6).setResizable(false);
        }

        pnlProductScreen.add(tableScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 142, 1280, 488));

        pnlAllScreens.add(pnlProductScreen, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        lblHomeBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/skb/resoruces/HomeBackground.png"))); // NOI18N

        javax.swing.GroupLayout pnlHomeScreenLayout = new javax.swing.GroupLayout(pnlHomeScreen);
        pnlHomeScreen.setLayout(pnlHomeScreenLayout);
        pnlHomeScreenLayout.setHorizontalGroup(
            pnlHomeScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHomeScreenLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lblHomeBackground)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnlHomeScreenLayout.setVerticalGroup(
            pnlHomeScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHomeScreenLayout.createSequentialGroup()
                .addGap(0, 3, Short.MAX_VALUE)
                .addComponent(lblHomeBackground)
                .addGap(0, 4, Short.MAX_VALUE))
        );

        pnlAllScreens.add(pnlHomeScreen, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 630));

        getContentPane().add(pnlAllScreens, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 1280, 630));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pnlHomeTabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlHomeTabMouseClicked
        // TODO add your handling code here:
        pnlHomeScreen.setVisible(true);
        pnlProductScreen.setVisible(false);
        pnlControlScreen.setVisible(false);
    }//GEN-LAST:event_pnlHomeTabMouseClicked
 
    private void pnlProductTabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlProductTabMouseClicked
        // TODO add your handling code here:
        pnlHomeScreen.setVisible(false);
        pnlProductScreen.setVisible(true);
        pnlControlScreen.setVisible(false);
    }//GEN-LAST:event_pnlProductTabMouseClicked

    private void comboBoxModeSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxModeSelectorActionPerformed
        // TODO add your handling code here:
        String selectedOption = (String) comboBoxModeSelector.getSelectedItem();
                
        // hide all panels
        pnlNoModeSelected.setVisible(false);
        pnlRemoveModeSelected.setVisible(false);
        pnlAddModeSelected.setVisible(false);
        pnlUpdateModeSelected.setVisible(false);

        // Show the selected panel
        switch (selectedOption) {
            case "No Mode":
                pnlNoModeSelected.setVisible(true);
                break;
            case "REMOVE":
                pnlRemoveModeSelected.setVisible(true);
                break;
            case "ADD":
                pnlAddModeSelected.setVisible(true);
                break;
            case "UPDATE":
                pnlUpdateModeSelected.setVisible(true);
                break;
        }
        pack();
    }//GEN-LAST:event_comboBoxModeSelectorActionPerformed

    private void pnlControlTabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlControlTabMouseClicked
        // TODO add your handling code here:
        pnlHomeScreen.setVisible(false);
        pnlProductScreen.setVisible(false);
        pnlControlScreen.setVisible(true);
    }//GEN-LAST:event_pnlControlTabMouseClicked

    private void btnAddItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddItActionPerformed
        // TODO add your handling code here:
        
        // Helper method to reset the border of a JTextField
        resetBorders();

        // Validate Product Supplier
        if (tfProductSupplier.getText().trim().isEmpty()) {
            tfProductSupplier.setBorder(BorderFactory.createLineBorder(Color.RED));
            JOptionPane.showMessageDialog(this, "Product Supplier cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            tfProductSupplier.requestFocus();
            return;
        }

        // Validate Product Quantity
        try {
            int quantity = Integer.parseInt(tfProductQuantity.getText().trim());
            if (quantity <= 0) {
                throw new NumberFormatException();
            }
        } catch (NumberFormatException e) {
            tfProductQuantity.setBorder(BorderFactory.createLineBorder(Color.RED));
            JOptionPane.showMessageDialog(this, "Product Quantity must be a positive integer.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            tfProductQuantity.requestFocus();
            return;
        }

        // Validate Product Unit
        if (tfProductUnit.getText().trim().isEmpty()) {
            tfProductUnit.setBorder(BorderFactory.createLineBorder(Color.RED));
            JOptionPane.showMessageDialog(this, "Product Unit cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            tfProductUnit.requestFocus();
            return;
        }

        // Validate Product Weight
        try {
            double weight = Double.parseDouble(tfProductWeight.getText().trim());
            if (weight <= 0) {
                throw new NumberFormatException();
            }
        } catch (NumberFormatException e) {
            tfProductWeight.setBorder(BorderFactory.createLineBorder(Color.RED));
            JOptionPane.showMessageDialog(this, "Product Weight must be a positive number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            tfProductWeight.requestFocus();
            return;
        }

        // Validate Product ID
        if (tfProductId.getText().trim().isEmpty()) {
            tfProductId.setBorder(BorderFactory.createLineBorder(Color.RED));
            JOptionPane.showMessageDialog(this, "Product ID cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            tfProductId.requestFocus();
            return;
        }

        // Validate Product Price
        try {
            double price = Double.parseDouble(tfProductPrice.getText().trim());
            if (price <= 0) {
                throw new NumberFormatException();
            }
        } catch (NumberFormatException e) {
            tfProductPrice.setBorder(BorderFactory.createLineBorder(Color.RED));
            JOptionPane.showMessageDialog(this, "Product Price must be a positive number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            tfProductPrice.requestFocus();
            return;
        }

        // Validate Product Name
        if (tfProductName.getText().trim().isEmpty()) {
            tfProductName.setBorder(BorderFactory.createLineBorder(Color.RED));
            JOptionPane.showMessageDialog(this, "Product Name cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            tfProductName.requestFocus();
            return;
        }

        // If all validations pass
        JOptionPane.showMessageDialog(this, "Product added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);    
        
        try {
            int productId = Integer.parseInt(tfProductId.getText().trim());
            String productName = tfProductName.getText().trim();
            String weight = tfProductWeight.getText().trim();
            String weightUnit = tfProductUnit.getText().trim();
            String supplier = tfProductSupplier.getText().trim();
            double price = Double.parseDouble(tfProductPrice.getText().trim());
            int quantity = Integer.parseInt(tfProductQuantity.getText().trim());

            // Create ProductModel object and register it
            ProductModel product = new ProductModel(productId, productName, weight, weightUnit, supplier, price, quantity);
            registerProduct(product);
            refreshProductTable();

            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Invalid input. Please ensure numeric fields are correctly filled.", "Input Error", JOptionPane.ERROR_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    
    }//GEN-LAST:event_btnAddItActionPerformed

    private void btnUpdateItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateItActionPerformed
        // TODO add your handling code here:
        
        // Helper method to reset the border of a JTextField
        resetBordersUpdate();

        // Validate Product Supplier
        if (tfProductSupplier1.getText().trim().isEmpty()) {
            tfProductSupplier1.setBorder(BorderFactory.createLineBorder(Color.RED));
            JOptionPane.showMessageDialog(this, "Product Supplier cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            tfProductSupplier1.requestFocus();
            return;
        }

        // Validate Product Quantity
        try {
            int quantity = Integer.parseInt(tfProductQuantity1.getText().trim());
            if (quantity <= 0) {
                throw new NumberFormatException();
            }
        } catch (NumberFormatException e) {
            tfProductQuantity1.setBorder(BorderFactory.createLineBorder(Color.RED));
            JOptionPane.showMessageDialog(this, "Product Quantity must be a positive integer.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            tfProductQuantity1.requestFocus();
            return;
        }

        // Validate Product Unit
        if (tfProductUnit1.getText().trim().isEmpty()) {
            tfProductUnit1.setBorder(BorderFactory.createLineBorder(Color.RED));
            JOptionPane.showMessageDialog(this, "Product Unit cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            tfProductUnit1.requestFocus();
            return;
        }

        // Validate Product Weight
        try {
            double weight = Double.parseDouble(tfProductWeight1.getText().trim());
            if (weight <= 0) {
                throw new NumberFormatException();
            }
        } catch (NumberFormatException e) {
            tfProductWeight1.setBorder(BorderFactory.createLineBorder(Color.RED));
            JOptionPane.showMessageDialog(this, "Product Weight must be a positive number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            tfProductWeight1.requestFocus();
            return;
        }

        // Validate Product ID
        if (tfProductId1.getText().trim().isEmpty()) {
            tfProductId1.setBorder(BorderFactory.createLineBorder(Color.RED));
            JOptionPane.showMessageDialog(this, "Product ID cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            tfProductId1.requestFocus();
            return;
        }

        // Validate Product Price
        try {
            double price = Double.parseDouble(tfProductPrice1.getText().trim());
            if (price <= 0) {
                throw new NumberFormatException();
            }
        } catch (NumberFormatException e) {
            tfProductPrice1.setBorder(BorderFactory.createLineBorder(Color.RED));
            JOptionPane.showMessageDialog(this, "Product Price must be a positive number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            tfProductPrice1.requestFocus();
            return;
        }

        // Validate Product Name
        if (tfProductName1.getText().trim().isEmpty()) {
            tfProductName1.setBorder(BorderFactory.createLineBorder(Color.RED));
            JOptionPane.showMessageDialog(this, "Product Name cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            tfProductName1.requestFocus();
            return;
        }

        // If all validations pass
        try {
            int productId = Integer.parseInt(tfProductId1.getText().trim());
            String productName = tfProductName1.getText().trim();
            String weight = tfProductWeight1.getText().trim();
            String weightUnit = tfProductUnit1.getText().trim();
            String supplier = tfProductSupplier1.getText().trim();
            double price = Double.parseDouble(tfProductPrice1.getText().trim());
            int quantity = Integer.parseInt(tfProductQuantity1.getText().trim());

            // Update the product in the product list or table
            ProductModel product = findProductById(productId); // Helper method to find the product by ID
            if (product != null) {
                product.setProductName(productName);
                product.setWeight(weight);
                product.setWeightUnit(weightUnit);
                product.setSupplier(supplier);
                product.setPrice(price);
                product.setQuantity(quantity);

                refreshProductTable(); // Refresh the table view after updating
                JOptionPane.showMessageDialog(this, "Product updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Product with the given ID not found.", "Update Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid input. Please ensure numeric fields are correctly filled.", "Input Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } 
    }//GEN-LAST:event_btnUpdateItActionPerformed

    private void btnRemoveItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveItActionPerformed
        // TODO add your handling code here:
            
        tfProductName2.setBorder(BorderFactory.createLineBorder(Color.GRAY));

        // Validate that the ID is entered
        if (tfProductName2.getText().trim().isEmpty()) {
            tfProductName2.setBorder(BorderFactory.createLineBorder(Color.RED));
            JOptionPane.showMessageDialog(this, "Product ID cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            tfProductName2.requestFocus();
            return;
        }

        try {
            // Parse the Product ID
            int productId = Integer.parseInt(tfProductName2.getText().trim());

            // Search and remove the product by ID
            boolean productRemoved = false;
            for (int i = 0; i < productList.size(); i++) {
                if (productList.get(i).getProductId() == productId) {
                    productList.remove(i);
                    productRemoved = true;
                    break;
                }
            }

            if (productRemoved) {
                refreshProductTable(); // Refresh the table to reflect changes
                JOptionPane.showMessageDialog(this, "Product removed successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Product with the given ID not found.", "Removal Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            tfProductName2.setBorder(BorderFactory.createLineBorder(Color.RED));
            JOptionPane.showMessageDialog(this, "Invalid Product ID. Please enter a valid integer.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            tfProductName2.requestFocus();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRemoveItActionPerformed

    private void resetBordersUpdate() {
        // Reset borders of all text fields in the update form to default
        tfProductSupplier1.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        tfProductQuantity1.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        tfProductUnit1.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        tfProductWeight1.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        tfProductId1.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        tfProductPrice1.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        tfProductName1.setBorder(BorderFactory.createLineBorder(Color.GRAY));
    }   

    private ProductModel findProductById(int productId) {
        for (ProductModel product : productList) {
            if (product.getProductId() == productId) {
                return product;
            }
        }
        return null;
    }
    
    private void resetBorders() {
        // Reset borders of all text fields to default
        tfProductSupplier.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        tfProductQuantity.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        tfProductUnit.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        tfProductWeight.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        tfProductId.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        tfProductPrice.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        tfProductName.setBorder(BorderFactory.createLineBorder(Color.GRAY));
    }
    
    // Method to add product data and populate the table
    private void registerProduct(ProductModel item) {
        productList.add(item);
        DefaultTableModel model = (DefaultTableModel) productTable.getModel();
        model.addRow(new Object[]{
            item.getProductId(),item.getProductName(), item.getPrice(), item.getQuantity(), item.getSupplier(), item.getWeight(), item.getWeightUnit()
        });
    }
    
    private void refreshProductTable() {
        DefaultTableModel model = (DefaultTableModel) productTable.getModel();
        model.setRowCount(0); // Clear existing rows

        for (ProductModel item : productList) {
            model.addRow(new Object[]{
            item.getProductId(),item.getProductName(), item.getPrice(), item.getQuantity(), item.getSupplier(), item.getWeight(), item.getWeightUnit()
        });
        }
        
        System.out.println("inside refresh table");
    }
    
    // Method to initialize data, including student list and table
    private void initializeData() {
        productList = new LinkedList();
        registerProduct(new ProductModel(1,"Rice", "20", "kg", "Newari", 2500, 10));
        registerProduct(new ProductModel(2, "Wheat Flour", "5", "kg", "Organic Farms", 200, 5));
        registerProduct(new ProductModel(3, "Sugar", "1", "kg", "Sweet Delight", 80, 20));
        registerProduct(new ProductModel(4, "Milk", "1", "Litre", "Dairy Fresh", 50, 15));
        registerProduct(new ProductModel(5, "Eggs", "1", "Dozen", "Happy Hens", 80, 30));
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddIt;
    private javax.swing.JButton btnRemoveIt;
    private javax.swing.JButton btnUpdateIt;
    private javax.swing.JComboBox<String> comboBoxModeSelector;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblAddAProduct;
    private javax.swing.JLabel lblAddAProduct1;
    private javax.swing.JLabel lblAddAProduct2;
    private javax.swing.JLabel lblBackArrow;
    private javax.swing.JLabel lblControlScreenMode;
    private javax.swing.JLabel lblFrontArrow;
    private javax.swing.JLabel lblHomeBackground;
    private javax.swing.JLabel lblNoModeSelectedBackground;
    private javax.swing.JLabel lblProductId;
    private javax.swing.JLabel lblProductId1;
    private javax.swing.JLabel lblProductName;
    private javax.swing.JLabel lblProductName1;
    private javax.swing.JLabel lblProductName2;
    private javax.swing.JLabel lblProductPrice;
    private javax.swing.JLabel lblProductPrice1;
    private javax.swing.JLabel lblProductQuantity;
    private javax.swing.JLabel lblProductQuantity1;
    private javax.swing.JLabel lblProductScreenProductsTable;
    private javax.swing.JLabel lblProductSupplier;
    private javax.swing.JLabel lblProductSupplier1;
    private javax.swing.JLabel lblProductUnit;
    private javax.swing.JLabel lblProductUnit1;
    private javax.swing.JLabel lblProductWeight;
    private javax.swing.JLabel lblProductWeight1;
    private javax.swing.JLabel lblRefresh;
    private javax.swing.JPanel pnlAddModeSelected;
    private javax.swing.JPanel pnlAllControlPanels;
    private javax.swing.JPanel pnlAllScreens;
    private javax.swing.JPanel pnlControlScreen;
    private javax.swing.JPanel pnlControlTab;
    private javax.swing.JPanel pnlHomeScreen;
    private javax.swing.JPanel pnlHomeTab;
    private javax.swing.JPanel pnlNoModeSelected;
    private javax.swing.JPanel pnlProductScreen;
    private javax.swing.JPanel pnlProductTab;
    private javax.swing.JPanel pnlRemoveModeSelected;
    private javax.swing.JPanel pnlSearchBar;
    private javax.swing.JPanel pnlTopBar;
    private javax.swing.JPanel pnlUpdateModeSelected;
    private javax.swing.JTable productTable;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JTextField textFieldSearchBar;
    private javax.swing.JTextField tfProductId;
    private javax.swing.JTextField tfProductId1;
    private javax.swing.JTextField tfProductName;
    private javax.swing.JTextField tfProductName1;
    private javax.swing.JTextField tfProductName2;
    private javax.swing.JTextField tfProductPrice;
    private javax.swing.JTextField tfProductPrice1;
    private javax.swing.JTextField tfProductQuantity;
    private javax.swing.JTextField tfProductQuantity1;
    private javax.swing.JTextField tfProductSupplier;
    private javax.swing.JTextField tfProductSupplier1;
    private javax.swing.JTextField tfProductUnit;
    private javax.swing.JTextField tfProductUnit1;
    private javax.swing.JTextField tfProductWeight;
    private javax.swing.JTextField tfProductWeight1;
    // End of variables declaration//GEN-END:variables
}
